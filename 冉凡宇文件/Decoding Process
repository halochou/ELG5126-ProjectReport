1.Decoding Process

1.1 Overview of typical H.264 decoder

The decoding process is carried out by an H.264 video decoder. Flow diagram is shown in Figure 1. (此处有图1) Initially, decoder codes compressed bitstream and does entropy decoding, obtaining a coefficient matrix. The following steps are dequantization and IDCT. Residual is output of this stage. Then the decoder will decode the frame depending on the combination of residual and prediction results. Notice that, in the both of coder and decoder, data is processed in units of macroblock. A decoded residual macroblock is formed by re-scaling and inverse transformation. Prediction is created in decoder and is added to the residual to generated a decoded macroblock. 

1.2 Parsing Process with Entropy Decoding

Inputs to parsing process are bitstream from contents of video slices. Output of this process are syntax element values. (Video sequence that is represented in a particular format which is synatx). (此处有图2) Actually, several methods are specified by H.264 for coding symbols, including Fixed Length Code, Exponential-Golomb variable length code, CAVLC and CABAC. 

And the data can be divided into two parts: decoder controlling parameters and transform coefficients. Above the slice data level, bits are decoded using Fixed Length decoder or Exp-Golomb decoder. In the slice data level and below, coefficient values are decoded in one of two ways. In CABAC mode, all symbols are decoded by CABAC decoder. Otherwise, coefficient values using CAVLC and other symbols are coded using fixed length or Exp-Golomb decoder. In our baseline decoder, Exp-Golomb and CAVLC are utilized.

1.2.1 Exponential Golomb Decoder 

Exponential Golomb codes (ExpG) are an efficient way of representing data symbols with varying probabilities. It assigns short codewords to frequently-occurring data symbols and long codewords to less common data symbols. A parameter code_num indicates codewords. The length of Exponential-Golomb codes are varying with two properties:
1) With the increase of code_num, code length also rises.
2) Without looking up for tables, each code can be generated and decode algorithmically. 

The structure of an Exp-Golomb codeword:
[Zero prefix] [1] [Information]
The codeword consists of M zero prefix (M ≥ 0, M is an integer), a one and M-bit information. The length of the codeword is 2M+1 bit.

The process of decoding code_num is followed: 
1.The decoder reads M consecutive zeros and calculates the total length of the next Exp-Golomb codeword as 2M + 1 bits. 
2. Read a one and ignore it.
3. It reads the remaining M bits and calculates code_num which is then mapped to k (data).

There is an example:
(此处有图3)
A codeword which will be decoded is on the left. There are 7 zeros. And a one is followed by the information code which is converted to decimal number. Then we calculate the result depending on the formula: code_num = 2M + Information – 1.

Then code_num is mapped to k (data) according to different mapping types which is shown in Figure4 (此处有图4).

1.2.2 Context Adaptive Variable Length Coding（CAVLC）

Residual, the transform coefficients are decoded by CAVLC decoder. Each 8 × 8 block of quantized transform coefficients is processed as four 4 × 4 blocks for the purposes of CAVLC encoding and decoding. The decoding process can be divided into 5 stages:
    1. Decode the number of coefficients and trailing ones
    2. Decode the sign of each trailing ones
    3. Decode the levels of the remaining non-zero coefficients
    4. Decode the number of zeros preceding each non-zero coefficient
    5. Zero padding 

Decode the number of coefficients and trailing ones, according to input bitstream and standard table 9-5. Then the result is used to decode sign of trailing ones. To decode the levels of the remaining coefficients, we need to obtain the suffix length and get level prefix depending on standard table 9-6. The next step is to decode the number of zeros preceding each non-zero coefficient. The total number of coefficients and standard table 9-7 are needed. After the four steps, use zero to pad the remaining elements.